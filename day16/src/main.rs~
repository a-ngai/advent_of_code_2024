use std::fs;
use std::collections::{HashSet, VecDeque};

#[derive(PartialEq, Clone, Debug)]
enum Direction {
    U,
    R,
    D,
    L,
}

const ALL_DIRECTIONS: [Direction; 4] = [Direction::U, Direction::R, Direction::D, Direction::L];

impl Direction {
    fn opposite(&self) -> Self {
        match self {
            Direction::U => Direction::D,
            Direction::R => Direction::L,
            Direction::D => Direction::U,
            Direction::L => Direction::R,
        }
    }

    fn step(&self) -> [isize; 2] {
        match self {
            Direction::U => [-1,  0],
            Direction::R => [ 0,  1],
            Direction::D => [ 1,  0],
            Direction::L => [ 0, -1],
        }
    }

    fn loc(&self) -> usize {
        match self {
            Direction::U => 0,
            Direction::R => 1,
            Direction::D => 2,
            Direction::L => 3,
        }
    }
}

#[derive(Clone, Debug)]
struct Path {
    row: usize,
    col: usize,
    score: usize,
    dir: Direction,
    chr: char,
}

impl Path {
    fn loc(&self) -> [usize; 2] { [self.row, self.col] }
}

fn next_steps(item: &Path, map: &Vec<Vec<char>>) -> [Path; 4] {
    let Path { row, col, dir, score, .. } = item;
    println!("current dir: {dir:?}");
    let next_steps = ALL_DIRECTIONS.map(|next_dir| {
        let [row_step, col_step] = next_dir.step();
        let next_row = ((*row as isize) + row_step) as usize;
        let next_col = ((*col as isize) + col_step) as usize;
        let next_chr = map[next_row][next_col];
        let opposite_dir = *dir == next_dir.opposite();
        let new_dir = *dir != next_dir;
        let next_score = if opposite_dir {
            score + 2000 + 1
        } else if new_dir {
            score + 1000 + 1  // +1000 for turning, +1 for moving
        } else {
            score + 1
        };
        Path { row: next_row, col: next_col, dir: next_dir, chr: next_chr, score: next_score }
    });
    next_steps
}


fn next_new_steps(item: &Path, map: &Vec<Vec<char>>, visited: &mut HashSet<[usize; 2]>) -> [Option<Path>; 4] {
    // directions if '.' or 'E', and if not opposite self.dir
    // not checking opposite self.dir, since that is handled when checking with the HashSet
    let next_items = next_steps(item, map);
    let next_new_items: [Option<Path>; 4] = next_items.map(|item| {
        let not_visited: bool = visited.insert(item.loc());
        let valid_char: bool = item.chr == '.' || item.chr == 'E';
        // panic!("removed the visited!");
        // change visited to be a record for a given orientation and location
        // match not_visited && valid_char  {
        match valid_char  {
            true => Some(item),
            false => None,
        }
    });
    next_new_items
}

fn best_path_score(map: &Vec<Vec<char>>) -> usize {
    // Make two stacks. The idea is to do a Dijkstra-like algorithm. The only difference, is that
    // the distance is determed by how many turns, which makes things slight more complicated. This
    // can be circumvented by having two stacks:
    // - first stack has all propagations that don't require a direction change
    // - second stack has all propagations that require a direction change

    let start_row = map.iter().position(|rowdata| rowdata.contains(&'S'))
        .unwrap_or_else(|| panic!("map does not contain 'E'"));
    let start_col = map[start_row].iter().position(|chr| chr == &'S')
        .unwrap();
    println!("start location: {start_row}, {start_col}");

    let num_rows = map.len();
    let num_cols = map[0].len();

    let start_path: Path = Path { row: start_row, col: start_col, score: 0, chr: 'S', dir: Direction::R};
    let mut memory_record: Vec<Vec<[usize; 4]>> = (0..num_rows).map(|_| (0..num_cols).map(|_| [u32::MAX; 4]).collect()).collect();
    let mut curr_stack: VecDeque<Path> = VecDeque::from([start_path,]);
    while curr_stack.len() > 0 {

        // VecDeque does not have Sort
        let mut sort_stack: Vec<Path> = curr_stack.into_iter().collect();
        sort_stack.sort_by(|path1, path2| path1.score.cmp(&path2.score));
        curr_stack = sort_stack.into_iter().collect();

        // curr_stack.make_contiguous().sort_by(|path1, path2| path1.score.cmp(&path2.score));

        let mut next_stack: VecDeque<Path> = VecDeque::new();
        while let Some(item) = curr_stack.pop_back() {

            if item.chr == 'E' { return item.score }

            let new_steps: [Option<Path>; 4] = next_new_steps(&item, &map, &mut visited);
            println!("{new_steps:?}");
            for next_item in new_steps.into_iter().filter_map(|item| item) {
                let is_new_dir: bool = item.dir == next_item.dir;
                match is_new_dir {
                    true => { next_stack.push_front(next_item) },
                    false => { curr_stack.push_front(next_item) },
                }
            }
        }
        curr_stack = next_stack;
    }
    todo!()
}

fn main() {
    let filename: &str = "input.txt";
    let textdata: String = fs::read_to_string(filename)
        .unwrap_or_else(|_| panic!("Cannot read file ({filename})"));

    let map: Vec<Vec<char>> = textdata.lines()
        .map(|string| string.chars().collect::<Vec<char>>())
        .collect();

    let score: usize = best_path_score(&map);
    println!("(Part  I) best path score: {score}");
}

#[test]
fn first_small_test() {
    let filename: &str = "test_input_1.txt";
    let textdata: String = fs::read_to_string(filename)
        .unwrap_or_else(|_| panic!("Cannot read file ({filename})"));

    let map: Vec<Vec<char>> = textdata.lines()
        .map(|string| string.chars().collect::<Vec<char>>())
        .collect();

    let score: usize = best_path_score(&map);
    assert_eq!(7036, score);
}

#[test]
#[ignore]
fn second_small_test() {
    let filename: &str = "test_input_2.txt";
    let textdata: String = fs::read_to_string(filename)
        .unwrap_or_else(|_| panic!("Cannot read file ({filename})"));

    let map: Vec<Vec<char>> = textdata.lines()
        .map(|string| string.chars().collect::<Vec<char>>())
        .collect();

    let score: usize = best_path_score(&map);
    assert_eq!(11_048, score);
}
